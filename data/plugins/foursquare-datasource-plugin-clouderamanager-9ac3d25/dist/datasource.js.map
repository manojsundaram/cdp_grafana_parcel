{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright 2015 Foursquare Labs, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport _ from 'lodash';\nimport * as $ from 'jquery';\nimport moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\n/** @ngInject */\nexport function ClouderaManagerDatasource(instanceSettings, $q, backendSrv, templateSrv) {\n  this.url = instanceSettings.url;\n  if (this.url.endsWith('/')) {\n    this.url = this.url.substr(0, this.url.length - 1);\n  }\n  this.basicAuth = instanceSettings.basicAuth;\n  this.withCredentials = instanceSettings.withCredentials;\n  this.name = instanceSettings.name;\n\n  this.apiVersion = 4;\n  if (instanceSettings.jsonData.cmAPIVersion === 'v6-10') {\n    this.apiVersion = 6;\n  } else if (instanceSettings.jsonData.cmAPIVersion === 'v11+') {\n    this.apiVersion = 11;\n  }\n\n  // Helper to make API requests to Cloudera Manager. To avoid CORS issues, the requests may be proxied\n  // through Grafana's backend via `backendSrv.datasourceRequest`.\n  this._request = function(options) {\n    options.url = this.url + options.url;\n    options.method = options.method || 'GET';\n    options.inspect = { 'type': 'cloudera_manager' };\n\n    if (this.basicAuth) {\n      options.withCredentials = true;\n      options.headers = {\n        \"Authorization\": this.basicAuth\n      };\n    }\n\n    return backendSrv.datasourceRequest(options);\n  };\n\n  // Test the connection to Cloudera Manager by querying for the supported API version.\n  this.testDatasource = function() {\n    var options = {\n      url: '/api/version',\n      transformResponse: function(data) {\n        return data;\n      }\n    };\n\n    return this._request(options).then(function(response) {\n      return {\n        status: \"success\",\n        message: \"Data source is working. API version is '\" + response.data + \"'.\",\n        title: \"Success\"\n      };\n    });\n  };\n\n  // Query for metric targets within the specified time range.\n  // Returns the promise of a result dictionary. See the convertResponse comment\n  // for specifics of the result dictionary.\n  this.query = function(queryOptions) {\n    var self = this;\n\n    var targetPromises = _(queryOptions.targets)\n      .filter(function(target) { return target.target && !target.hide; })\n      .map(function(target) {\n        var url = '/api/v' + self.apiVersion + '/timeseries';\n        var query = {\n          query: templateSrv.replace(target.target, queryOptions.scopedVars),\n          from: queryOptions.range.from.toJSON(),\n          to: queryOptions.range.to.toJSON(),\n        };\n\n        if (self.apiVersion >= 6) {\n          query.contentType = 'application/json';\n        }\n\n        var requestOptions;\n        if (self.apiVersion >= 11) {\n          // Use POST method on API versions 11 and higher\n          // Parameters are passed via the body. This allows longer TSQUERY queries.\n          requestOptions = {\n            method: 'POST',\n            url: url,\n            data: query\n          };\n        } else {\n          // Use GET method for API versions prior to 11\n          // Parameters are passed via query string.\n          requestOptions = {\n            method: 'GET',\n            url: url,\n            params: query\n          };\n        }\n\n        return self._request(requestOptions).then(_.bind(self.convertResponse, self));\n      })\n      .value();\n\n    return $q.all(targetPromises).then(function(convertedResponses) {\n      var result = {\n        data: _.map(convertedResponses, function(convertedResponse) {\n          return convertedResponse.data;\n        })\n      };\n      result.data = _.flatten(result.data);\n      return result;\n    });\n  };\n\n  // Convert the metadata returned from Cloudera Manager into the timeseries name for Grafana.\n  this._makeTimeseriesName = function(metadata) {\n    if (metadata.alias) {\n      var alias = metadata.alias;\n      if (metadata.metricName) {\n        alias = alias.replace('%metricName%', metadata.metricName);\n      }\n      if (metadata.entityName) {\n        alias = alias.replace('%entityName%', metadata.entityName);\n      }\n      return alias;\n    } else if (metadata.metricName && metadata.entityName) {\n      return metadata.metricName + ' (' + metadata.entityName  + ')';\n    } else if (metadata.metricName) {\n      return metadata.metricName;\n    } else if (metadata.entityName) {\n      return metadata.entityName;\n    } else {\n      return 'UNKNOWN NAME';\n    }\n  };\n\n  // Convert the Cloudera Manager response to the format expected by Grafana.\n  //\n  // Grafana generally expects:\n  // { data: [\n  //   { target: 'metricName1',\n  //     datapoints: [ [a1, ts-a1], [a2, ts-a2], [a3, ts-a3] ]\n  //   },\n  //   { target: 'metricName2',\n  //     datapoints: [ [b1, ts-b1], [b2, ts-b2], [c3, ts-b3] ]\n  //   },\n  // ]}\n  //\n  // The CM API response has the general form:\n  // items: {\n  //   timeSeries: [\n  //     {\n  //       metadata: {\n  //         metricName: \"metricName1\",\n  //         entityName: \"entityName1\",\n  //         ...\n  //       },\n  //       data: [\n  //         {\n  //           value: 45.1234,\n  //           timestamp: \"2015-10-02T12:58:24.009Z\",\n  //           ...\n  //         }, {\n  //           value: 98.7654,\n  //           timestamp: \"2015-10-02T12:59:24.009Z\",\n  //           ...\n  //         }\n  //         ... (more datapoints)\n  //       ]\n  //     }\n  //     ... (more timeseries)\n  //   ]\n  // }\n  this.convertResponse = function(response) {\n    var self = this;\n\n    if (!response || !response.data || !response.data.items) { return []; }\n\n    var seriesList = [];\n    _(response.data.items).forEach(function(item) {\n      _.forEach(item.timeSeries, function(timeSeries) {\n        seriesList.push({\n          target: self._makeTimeseriesName(timeSeries.metadata),\n          datapoints: _.map(timeSeries.data, function(point) {\n            var ts = moment.utc(dateMath.parse(point.timestamp)).unix() * 1000;\n            return [point.value, ts];\n          })\n        });\n      });\n    });\n\n    return {data: seriesList};\n  };\n}\n"]}